{
  "info": {
    "_postman_id": "12345678-1234-1234-1234-123456789012",
    "name": "Microservice Platform API",
    "description": "Comprehensive API collection for the Microservice Platform including authentication, orders, payments, files, chat, and admin endpoints.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Registration successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('tempUserId');",
                  "    pm.environment.set('tempUserId', responseJson.tempUserId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{testName}}\",\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"password123\",\n    \"phone\": \"{{testPhone}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account with email, password, and phone number."
          },
          "response": [
            {
              "name": "Successful Registration",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"john@example.com\",\n    \"password\": \"password123\",\n    \"phone\": \"+1234567890\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "register"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"message\": \"Registration successful. OTP sent to phone.\",\n    \"tempUserId\": \"temp_1234567890\"\n}"
            }
          ]
        },
        {
          "name": "Verify OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"OTP verification successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.environment.set('authToken', responseJson.token);",
                  "    pm.environment.set('userId', responseJson.user.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"phone\": \"{{testPhone}}\",\n    \"otp\": \"123456\",\n    \"tempUserId\": \"{{tempUserId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-otp"]
            },
            "description": "Verify OTP code sent to phone number during registration."
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "    pm.environment.set('authToken', responseJson.token);",
                  "    pm.environment.set('userId', responseJson.user.id);",
                  "    pm.environment.set('userRole', responseJson.user.role);",
                  "    ",
                  "    if (responseJson.user.role === 'admin') {",
                  "        pm.environment.set('adminToken', responseJson.token);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password to get JWT token."
          },
          "response": [
            {
              "name": "Successful Login",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"user@example.com\",\n    \"password\": \"password123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "login"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"user\": {\n        \"id\": \"1\",\n        \"email\": \"user@example.com\",\n        \"name\": \"John Doe\",\n        \"role\": \"user\"\n    }\n}"
            }
          ]
        },
        {
          "name": "Admin Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Admin login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('token');",
                  "    pm.expect(responseJson.user.role).to.eql('admin');",
                  "    pm.environment.set('adminToken', responseJson.token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"password\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login as admin user to get admin JWT token."
          },
          "response": []
        },
        {
          "name": "Verify Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Token verification successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/verify",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify"]
            },
            "description": "Verify JWT token and get user information."
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for user registration, login, and token verification."
    },
    {
      "name": "Order Management",
      "item": [
        {
          "name": "Get Orders",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get orders successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('orders');",
                  "    pm.expect(responseJson.orders).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            },
            "description": "Get all orders for the authenticated user (or all orders for admin)."
          },
          "response": []
        },
        {
          "name": "Create Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Order created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('order');",
                  "    pm.expect(responseJson.order).to.have.property('id');",
                  "    pm.environment.set('orderId', responseJson.order.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"customerName\": \"{{testName}}\",\n    \"customerEmail\": \"{{testEmail}}\",\n    \"items\": [\n        {\n            \"name\": \"Test Product A\",\n            \"quantity\": 2,\n            \"price\": 29.99\n        },\n        {\n            \"name\": \"Test Product B\",\n            \"quantity\": 1,\n            \"price\": 49.99\n        }\n    ],\n    \"total\": 109.97,\n    \"shippingAddress\": \"123 Test Street\\nTest City, TS 12345\\nUnited States\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            },
            "description": "Create a new order with items and shipping information."
          },
          "response": []
        },
        {
          "name": "Update Order Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Order status updated\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"shipped\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "status"]
            },
            "description": "Update order status (admin only)."
          },
          "response": []
        }
      ],
      "description": "Order management endpoints for creating and managing orders."
    },
    {
      "name": "Payment Processing",
      "item": [
        {
          "name": "Get Payments",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get payments successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('payments');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/payments",
              "host": ["{{baseUrl}}"],
              "path": ["payments"]
            },
            "description": "Get payment history for the authenticated user."
          },
          "response": []
        },
        {
          "name": "Process Payment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Payment processed\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('payment');",
                  "    pm.expect(responseJson.payment.status).to.be.oneOf(['completed', 'failed']);",
                  "    if (responseJson.payment.status === 'completed') {",
                  "        pm.environment.set('paymentId', responseJson.payment.id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"orderId\": \"{{orderId}}\",\n    \"amount\": 109.97,\n    \"currency\": \"usd\",\n    \"method\": \"stripe\",\n    \"customerEmail\": \"{{testEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments/process",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "process"]
            },
            "description": "Process a payment for an order."
          },
          "response": []
        },
        {
          "name": "Add Payment Method",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Payment method added\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"type\": \"card\",\n    \"cardNumber\": \"4242424242424242\",\n    \"expiryMonth\": \"12\",\n    \"expiryYear\": \"25\",\n    \"cvc\": \"123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/payments/methods",
              "host": ["{{baseUrl}}"],
              "path": ["payments", "methods"]
            },
            "description": "Add a new payment method to user account."
          },
          "response": []
        }
      ],
      "description": "Payment processing endpoints for handling transactions."
    },
    {
      "name": "File Management",
      "item": [
        {
          "name": "Get Files",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get files successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('files');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files",
              "host": ["{{baseUrl}}"],
              "path": ["files"]
            },
            "description": "Get all files uploaded by the authenticated user."
          },
          "response": []
        },
        {
          "name": "Upload File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"File uploaded successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('file');",
                  "    pm.environment.set('fileId', responseJson.file.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/files/upload",
              "host": ["{{baseUrl}}"],
              "path": ["files", "upload"]
            },
            "description": "Upload a file to the platform."
          },
          "response": []
        },
        {
          "name": "Download File",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files/{{fileId}}/download",
              "host": ["{{baseUrl}}"],
              "path": ["files", "{{fileId}}", "download"]
            },
            "description": "Download a file by ID."
          },
          "response": []
        },
        {
          "name": "Delete File",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"File deleted successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/files/{{fileId}}",
              "host": ["{{baseUrl}}"],
              "path": ["files", "{{fileId}}"]
            },
            "description": "Delete a file by ID."
          },
          "response": []
        }
      ],
      "description": "File management endpoints for upload, download, and file operations."
    },
    {
      "name": "Chat System",
      "item": [
        {
          "name": "Get Chat Rooms",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Get chat rooms successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('rooms');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chat/rooms",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "rooms"]
            },
            "description": "Get all chat rooms for the authenticated user."
          },
          "response": []
        },
        {
          "name": "Create Chat Room",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Chat room created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('room');",
                  "    pm.environment.set('roomId', responseJson.room.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Chat Room\",\n    \"type\": \"group\",\n    \"participants\": [\"{{testEmail}}\", \"admin@example.com\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat/rooms",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "rooms"]
            },
            "description": "Create a new chat room."
          },
          "response": []
        },
        {
          "name": "Send Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Message sent successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"content\": \"Hello! This is a test message from the API testing suite.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chat/rooms/{{roomId}}/messages",
              "host": ["{{baseUrl}}"],
              "path": ["chat", "rooms", "{{roomId}}", "messages"]
            },
            "description": "Send a message to a chat room."
          },
          "response": []
        }
      ],
      "description": "Chat system endpoints for real-time messaging."
    },
    {
      "name": "Admin Dashboard",
      "item": [
        {
          "name": "Get Dashboard Stats",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Dashboard stats retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('totalOrders');",
                  "    pm.expect(responseJson).to.have.property('totalSpent');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/dashboard/stats",
              "host": ["{{baseUrl}}"],
              "path": ["dashboard", "stats"]
            },
            "description": "Get dashboard statistics (admin only)."
          },
          "response": []
        },
        {
          "name": "Get Service Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Service health retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('services');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/services",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "services"]
            },
            "description": "Get service health status (admin only)."
          },
          "response": []
        },
        {
          "name": "Get System Metrics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"System metrics retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('metrics');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "metrics"]
            },
            "description": "Get system performance metrics (admin only)."
          },
          "response": []
        }
      ],
      "description": "Admin dashboard endpoints for system monitoring and management."
    },
    {
      "name": "Health Checks",
      "item": [
        {
          "name": "Database Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Database health check\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('database');",
                  "    pm.expect(responseJson.database.status).to.eql('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/database",
              "host": ["{{baseUrl}}"],
              "path": ["health", "database"]
            },
            "description": "Check database connectivity and health."
          },
          "response": []
        },
        {
          "name": "Service Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Service health check\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check overall service health."
          },
          "response": []
        }
      ],
      "description": "Health check endpoints for monitoring system status."
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Invalid Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid login returns 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"invalid@example.com\",\n    \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Test invalid login credentials."
          },
          "response": []
        },
        {
          "name": "Unauthorized Access",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Unauthorized access returns 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            },
            "description": "Test accessing protected endpoint without token."
          },
          "response": []
        },
        {
          "name": "Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Invalid token returns 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            },
            "description": "Test accessing protected endpoint with invalid token."
          },
          "response": []
        },
        {
          "name": "Admin Access Denied",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Non-admin access denied returns 403\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/services",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "services"]
            },
            "description": "Test non-admin user accessing admin endpoint."
          },
          "response": []
        },
        {
          "name": "Resource Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Resource not found returns 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/orders/999999",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "999999"]
            },
            "description": "Test accessing non-existent resource."
          },
          "response": []
        }
      ],
      "description": "Error scenario tests for validation and security."
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "if (pm.request.headers.has('Authorization')) {",
          "    const token = pm.environment.get('authToken');",
          "    if (token && !pm.request.headers.get('Authorization').includes('invalid')) {",
          "        pm.request.headers.upsert({",
          "            key: 'Authorization',",
          "            value: 'Bearer ' + token",
          "        });",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has valid JSON structure', function () {",
          "    if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
          "        pm.response.to.be.json;",
          "    }",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api",
      "type": "string"
    }
  ]
}
